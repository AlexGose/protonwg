#!/bin/bash

# Use ProtonVPN with Wireguard config files on Ubuntu 20.04

error() {
  echo "ERROR: $1" >&2
  exit 1
}

usage() {
  echo "Usage: protonwg OPTIONS
    OPTIONS
      -h                         Help.  Prints this help message
      -c                         Connect to the VPN server
      -d                         Disable Docker
      -f                         Set UFW firewall rules
      -n <network interface>     VPN network interface for firewall rules and
                                 connecting to VPN
      -a <ip address>            VPN server IP address for firewall rules
      -l <lan subnet>            LAN subnet for firewall rules (default 
                                 192.168.1.0/24)
      -s                         Show connection, docker, and UFW status
      -r                         Reboot computer when done"
}

disable_docker() {
  sudo systemctl stop docker
  sudo systemctl disable docker
}

docker_is_enabled() {
  local interface_name
  interface_name="$(nmcli --get-value name connection show --active | \
      grep docker0)"
  if [[ -n "${interface_name}" ]]; then
    echo "true"
  else
    echo "false"
  fi
}

enable_docker_host_access() {
  sudo ufw allow out on docker0 from 172.17.0.0/16
}

enable_docker_bridge() {
  sudo ufw allow in on docker0 from 172.17.0.0/16 to 172.17.0.0/16
}

set_firewall_rules() {
  set_kill_switch $1 $2
  enable_lan_access $3
  if [[ "$(docker_is_enabled)" == "true" ]]; then
    enable_docker_bridge
    enable_docker_host_access
  fi
  sudo ufw enable
}

set_kill_switch() {
  sudo ufw default deny outgoing
  sudo ufw default deny incoming
  sudo ufw allow out on "$1" from any to any
  sudo ufw allow out to "$2" port 51820 proto udp
}

enable_lan_access() {
  sudo ufw allow out to "$1"
}


print_status() {
  echo "Active connections status:"
  nmcli c s -a | cat
  echo
  echo "Docker service status:"
  sudo systemctl --type=service | grep -i docker
  echo
  echo "UFW status:"
  sudo ufw status
}

main() {
  local firewall_rules
  firewall_rules="false"
  local reboot
  reboot="false"
  local net_interface
  local ip_address
  local lan_subnet
  lan_subnet="192.168.1.0/24"
  local connect_to_vpn
  connect_to_vpn="false"
  local show_status
  show_status="false"

  while getopts :fdrhn:a:sl:c opt; do
    case "${opt}" in
      h) usage; exit 0 ;;
      d) disable_docker ;;
      f) firewall_rules="true" ;;
      r) reboot="true" ;;
      n) net_interface="${OPTARG}" ;;
      a) ip_address="${OPTARG}" ;;
      l) lan_subnet="${OPTARG}" ;;
      c) connect_to_vpn="true" ;;
      s) show_status="true" ;;
      ?) usage; error "unrecognized command line option: ${opt}" ;;
    esac
  done

  if [[ "${firewall_rules}" == "true" ]]; then
    if [[ -n "${net_interface}" ]] && [[ -n "${ip_address}" ]]; then
      set_firewall_rules "${net_interface}" "${ip_address}" "${lan_subnet}"
    else
      error "network interface and ip address must be included with -f"
    fi
  fi

  if [[ "${connect_to_vpn}" == "true" ]]; then
    if [[ -n "${net_interface}" ]]; then
      nmcli connection up id "${net_interface}"
    else
      error "network interface must be included with -c"
    fi
  fi
  
  if [[ "${show_status}" == "true" ]]; then
    print_status
  fi

  if [[ "${reboot}" == "true" ]]; then
    sudo shutdown -r now
  fi
}

main "$@"
