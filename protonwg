#!/bin/bash

# Use ProtonVPN with Wireguard config files on Ubuntu 20.04

error() {
  echo "ERROR: $1" >&2
  exit 1
}

assert_both_not_true() {
  if [[ "$1" == "true" ]] && [[ "$2" == "true" ]]; then
    error "Cannot use both command line options $3 and $4"
  fi
}

usage() {
  echo "Usage: protonwg OPTIONS
    OPTIONS
      -h                         Help.  Prints this help message
      -c                         Connect to the VPN server
      -C                         Disconnect from the VPN server
      -d                         Disable Docker
      -D                         Enable Docker
      -f                         Set UFW firewall rules
      -F                         Reset (disable) UFW firewall rules.  Will
                                 occur before any new rules are set
      -n <network interface>     VPN network interface for firewall rules and
                                 connecting to, or disconnecting from, the VPN
      -a <ip address>            VPN server IP address for firewall rules
      -l <lan subnet>            LAN subnet for firewall rules (default 
                                 192.168.1.0/24)
      -L                         List available network interfaces
      -s                         Show connection, docker, and UFW status
      -r                         Reboot computer when done"
}

disable_docker() {
  systemctl stop docker
  systemctl disable docker
}

enable_docker() {
  systemctl start docker
  systemctl enable docker
}

enable_docker_host_access() {
  ufw allow out on docker0 from 172.17.0.0/16
}

enable_docker_bridge() {
  ufw allow in on docker0 from 172.17.0.0/16 to 172.17.0.0/16
}

set_firewall_rules() {
  local ip_address
  ip_address="$2"
  if [[ -z "${ip_address}" ]]; then
    ip_address="$(print_ip_address "$1")"
  fi
  if [[ -z "${ip_address}" ]]; then
    error "IP address not found in \"/etc/wireguard/$1.conf\". Use -a option."
  fi

  set_kill_switch "$1" "${ip_address}"
  enable_lan_access "$3"
  if [[ "$(systemctl is-enabled docker)" == "enabled" ]]; then
    enable_docker_bridge
    enable_docker_host_access
  fi
  ufw enable
}

print_ip_address() {
  local ip_regex
  ip_regex="^[\ ]*Endpoint[\ ]?=[\ ]?"
  ip_regex+="([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})"
  if [[ -f "/etc/wireguard/$1.conf" ]]; then
    readarray -t lines < <(cat "/etc/wireguard/$1.conf")
    for line in "${lines[@]}"; do
      if [[ "${line}" =~ ${ip_regex} ]]; then
        echo "${BASH_REMATCH[1]}"
        return 0
      fi
    done
  fi
  echo ""
}

reset_firewall() {
  ufw --force reset
}

set_kill_switch() {
  ufw default deny outgoing
  ufw default deny incoming
  ufw allow out on "$1" from any to any
  ufw allow out to "$2" port 51820 proto udp
}

enable_lan_access() {
  ufw allow out to "$1"
}

print_status() {
  echo "Active connections status:"
  nmcli c s -a | cat
  echo
  echo "Docker service status:"
  systemctl --type=service | grep -i docker
  echo
  echo "UFW status:"
  ufw status
}

connect() {
  if [[ -n "$1" ]]; then
    nmcli connection up id "$1"
  else
    error "network interface must be included with -c"
  fi
}

disconnect() {
  if [[ -n "$1" ]]; then
    nmcli connection down id "$1"
  else
    error "No active interface detected."
  fi
}

print_active_interface() {
  echo "$(nmcli -t c s -a | awk -F: '$3 == "vpn" { print $1 }')"
}

print_vpn_interfaces() {
  echo "Available network interfaces:"
  local interfaces
  readarray -t interfaces < \
      <(nmcli -t c s | awk -F: '$3 == "vpn" { print $1 }')
  for interface in "${interfaces[@]}"; do
    if [[ "${interface}" == "$(print_active_interface)" ]]; then
      echo "${interface} <--- active connection"
    else
      echo "${interface}"
    fi
  done
}

main() {
  local firewall_rules
  firewall_rules="false"
  local reboot
  reboot="false"
  local net_interface
  local ip_address
  local lan_subnet
  lan_subnet="192.168.1.0/24"
  local list_interfaces
  list_interfaces="false"
  local connect_to_vpn
  connect_to_vpn="false"
  local disconnect_from_vpn
  disconnect_from_vpn="false"
  local show_status
  show_status="false"

  while getopts :hdDfFrn:a:l:LcCs opt; do
    case "${opt}" in
      h) usage; exit 0 ;;
      d) disable_docker ;;
      D) enable_docker ;;
      f) firewall_rules="true" ;;
      F) reset_firewall ;;
      r) reboot="true" ;;
      n) net_interface="${OPTARG}" ;;
      a) ip_address="${OPTARG}" ;;
      l) lan_subnet="${OPTARG}" ;;
      L) list_interfaces="true" ;;
      c) connect_to_vpn="true" ;;
      C) disconnect_from_vpn="true" ;;
      s) show_status="true" ;;
      ?) usage; error "unrecognized command line option: ${opt}" ;;
    esac
  done

  if [[ "${firewall_rules}" == "true" ]]; then
    if [[ -n "${net_interface}" ]]; then
      set_firewall_rules "${net_interface}" "${ip_address}" "${lan_subnet}"
    else
      error "network interface must be included with -f"
    fi
  fi

  assert_both_not_true "${connect_to_vpn}" "${disconnect_from_vpn}" "-c" "-C"
  if [[ "${connect_to_vpn}" == "true" ]]; then
    connect "${net_interface}"
  fi
  if [[ "${disconnect_from_vpn}" == "true" ]]; then
    disconnect "$(print_active_interface)"
  fi

  if [[ "${list_interfaces}" == "true" ]]; then
    print_vpn_interfaces
  fi

  if [[ "${show_status}" == "true" ]]; then
    print_status
  fi

  if [[ "${reboot}" == "true" ]]; then
    shutdown -r now
  fi
}

main "$@"
